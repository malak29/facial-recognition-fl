# CI/CD Pipeline for Federated Learning System
name: Federated Learning CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        test-type: ["unit", "integration", "e2e"]
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_fl
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for SonarCloud
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libopencv-dev \
          libhdf5-dev \
          libjpeg-dev \
          libpng-dev \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          libv4l-dev \
          libatlas-base-dev \
          gfortran
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock coverage
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 src/ api/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ api/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with Black
      run: |
        pip install black
        black --check --diff src/ api/ tests/
    
    - name: Type check with MyPy
      run: |
        pip install mypy
        mypy src/ api/ --ignore-missing-imports
    
    - name: Security scan with Bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ api/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        if [ "${{ matrix.test-type }}" = "unit" ]; then
          python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        elif [ "${{ matrix.test-type }}" = "integration" ]; then
          python -m pytest tests/integration/ -v --cov=src --cov-append
        elif [ "${{ matrix.test-type }}" = "e2e" ]; then
          python -m pytest tests/e2e/ -v --cov=src --cov-append
        fi
      env:
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_fl
        ENVIRONMENT: testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.python-version }}-${{ matrix.test-type }}
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          htmlcov/
          bandit-report.json
          pytest-report.xml

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Federated Learning System'
        path: '.'
        format: 'JSON'
        out: 'dependency-check-report'
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report/

  # Performance Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler
    
    - name: Run performance benchmarks
      run: |
        python tests/benchmarks/performance_tests.py
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results/

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    strategy:
      matrix:
        component: [server, client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom-${{ matrix.component }}.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.component }}
        path: sbom-${{ matrix.component }}.spdx.json

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
    
    - name: Deploy to development
      run: |
        # Update image tags in deployment
        sed -i "s|fl-system/server:.*|${{ needs.build.outputs.image-tag }}|" kubernetes/manifests/federated-learning-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f kubernetes/manifests/ -n federated-learning-dev
        
        # Wait for deployment to complete
        kubectl rollout status deployment/fl-server -n federated-learning-dev --timeout=300s
        kubectl rollout status deployment/fl-client -n federated-learning-dev --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=fl-server -n federated-learning-dev --timeout=300s
        
        # Run basic smoke tests
        SERVER_URL=$(kubectl get service fl-server-external -n federated-learning-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$SERVER_URL/health || exit 1
        curl -f http://$SERVER_URL/status || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy with Helm
      run: |
        helm upgrade --install federated-learning ./helm/federated-learning \
          --namespace federated-learning-staging \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --set replicaCount.server=2 \
          --set replicaCount.client=5 \
          --wait --timeout=600s
    
    - name: Run integration tests
      run: |
        # Run comprehensive integration tests against staging
        python -m pytest tests/integration/ \
          --staging-url=https://staging.fedlearning.yourdomain.com \
          --api-key=${{ secrets.STAGING_API_KEY }}

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
    
    - name: Blue-Green Deployment
      run: |
        # Blue-Green deployment strategy
        CURRENT_COLOR=$(kubectl get deployment fl-server -o jsonpath='{.metadata.labels.color}' -n federated-learning-prod || echo "blue")
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        echo "Current deployment: $CURRENT_COLOR, New deployment: $NEW_COLOR"
        
        # Deploy new version with new color
        helm upgrade --install federated-learning-${NEW_COLOR} ./helm/federated-learning \
          --namespace federated-learning-prod \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set deployment.color=${NEW_COLOR} \
          --set replicaCount.server=3 \
          --set replicaCount.client=10 \
          --wait --timeout=900s
        
        # Health check on new deployment
        kubectl wait --for=condition=ready pod -l app=fl-server,color=${NEW_COLOR} -n federated-learning-prod --timeout=600s
        
        # Switch traffic to new deployment
        kubectl patch service fl-server -p '{"spec":{"selector":{"color":"'${NEW_COLOR}'"}}}' -n federated-learning-prod
        
        # Wait and verify
        sleep 60
        
        # Run production smoke tests
        PROD_URL=$(kubectl get ingress fl-ingress -o jsonpath='{.spec.rules[0].host}' -n federated-learning-prod)
        curl -f https://$PROD_URL/health || exit 1
        
        # If successful, remove old deployment
        helm uninstall federated-learning-${CURRENT_COLOR} -n federated-learning-prod || true
    
    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Federated Learning System deployed to production
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Scans
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Regression Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler psutil
    
    - name: Run performance benchmarks
      run: |
        python tests/benchmarks/performance_tests.py --save-results
    
    - name: Store performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.sha }}
        path: benchmark_results/
    
    - name: Performance regression check
      run: |
        # Compare with baseline performance (if available)
        if [ -f "baseline_performance.json" ]; then
          python scripts/compare_performance.py \
            --current benchmark_results/raw_results.json \
            --baseline baseline_performance.json \
            --threshold 0.1  # 10% performance degradation threshold
        fi

  # Documentation Generation
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser sphinx-autodoc-typehints
        pip install -r requirements.txt
    
    - name: Generate API documentation
      run: |
        # Generate OpenAPI spec
        python scripts/generate_openapi_spec.py
        
        # Generate Sphinx documentation
        cd docs/
        make html
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create release assets
      run: |
        # Create deployment package
        tar -czf federated-learning-${{ github.ref_name }}.tar.gz \
          kubernetes/ helm/ docker/ scripts/ docs/
        
        # Create checksums
        sha256sum federated-learning-${{ github.ref_name }}.tar.gz > checksums.txt
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./federated-learning-${{ github.ref_name }}.tar.gz
        asset_name: federated-learning-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

# Workflow notifications
  notify:
    name: Workflow Notification
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always()
    
    steps:
    - name: Notify on Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            attachments: [{
              color: '${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.security-scan.result == 'success' && 'good' || 'danger' }}',
              title: 'Federated Learning CI/CD Pipeline',
              fields: [{
                title: 'Repository',
                value: '${{ github.repository }}',
                short: true
              }, {
                title: 'Branch',
                value: '${{ github.ref_name }}',
                short: true
              }, {
                title: 'Commit',
                value: '${{ github.sha }}',
                short: true
              }, {
                title: 'Author',
                value: '${{ github.actor }}',
                short: true
              }, {
                title: 'Tests',
                value: '${{ needs.test.result }}',
                short: true
              }, {
                title: 'Build',
                value: '${{ needs.build.result }}',
                short: true
              }, {
                title: 'Security',
                value: '${{ needs.security-scan.result }}',
                short: true
              }],
              footer: 'GitHub Actions',
              ts: ${{ github.event.head_commit.timestamp }}
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}