apiVersion: v1
kind: Namespace
metadata:
  name: federated-learning
  labels:
    name: federated-learning
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fl-config
  namespace: federated-learning
data:
  app-config.yaml: |
    server:
      max_clients: 100
      min_clients: 2
      round_timeout: 300
      aggregation_strategy: "fedavg"
      model_type: "cnn"
      framework: "tensorflow"
    
    model:
      input_shape: [224, 224, 3]
      num_classes: 2
      dropout_rate: 0.5
      l2_regularization: 0.0001
    
    training:
      max_rounds: 100
      convergence_threshold: 0.001
      client_fraction: 0.3
      local_epochs: 5
      batch_size: 32
    
    privacy:
      enabled: true
      epsilon: 1.0
      delta: 1e-5
      noise_mechanism: "gaussian"
    
    fairness:
      enabled: true
      sensitive_attributes: ["age_group", "gender", "ethnicity"]
      fairness_threshold: 0.8

  prometheus-config.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "alert_rules.yml"
    
    scrape_configs:
      - job_name: 'federated-learning-server'
        static_configs:
          - targets: ['fl-server:8082']
        metrics_path: '/metrics'
        scrape_interval: 10s
      
      - job_name: 'federated-learning-clients'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["federated-learning"]
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: fl-client

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: fl-secrets
  namespace: federated-learning
type: Opaque
data:
  # Base64 encoded values (replace with actual values)
  postgres-password: cGFzc3dvcmQxMjM=  # password123
  api-secret-key: c3VwZXJzZWNyZXRrZXkxMjM=  # supersecretkey123
  redis-password: cmVkaXNwYXNzd29yZDE=  # redispassword1
  jwt-secret: and0c2VjcmV0a2V5Zm9yYXV0aA==  # jwtsecretkeyforauth

---
# PersistentVolume for data storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fl-data-pv
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs
  nfs:
    server: nfs-server.example.com
    path: "/data/federated-learning"

---
# PersistentVolumeClaim for data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fl-data-pvc
  namespace: federated-learning
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: nfs
  resources:
    requests:
      storage: 50Gi

---
# PersistentVolumeClaim for checkpoints
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fl-checkpoints-pvc
  namespace: federated-learning
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi

---
# Deployment for Federated Learning Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fl-server
  namespace: federated-learning
  labels:
    app: fl-server
    component: server
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fl-server
  template:
    metadata:
      labels:
        app: fl-server
        component: server
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fl-server-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: fl-server
        image: fl-system/server:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: api
          protocol: TCP
        - containerPort: 8081
          name: federated
          protocol: TCP
        - containerPort: 8082
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fl-secrets
              key: postgres-password
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fl-secrets
              key: api-secret-key
        - name: REDIS_URL
          value: "redis://fl-redis:6379/0"
        - name: DATABASE_URL
          value: "postgresql://fl_user:$(POSTGRES_PASSWORD)@fl-postgres:5432/federated_learning"
        volumeMounts:
        - name: fl-config
          mountPath: /app/config
          readOnly: true
        - name: fl-data
          mountPath: /app/data
        - name: fl-checkpoints
          mountPath: /app/checkpoints
        - name: fl-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: fl-config
        configMap:
          name: fl-config
      - name: fl-data
        persistentVolumeClaim:
          claimName: fl-data-pvc
      - name: fl-checkpoints
        persistentVolumeClaim:
          claimName: fl-checkpoints-pvc
      - name: fl-logs
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Deployment for Federated Learning Clients
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fl-client
  namespace: federated-learning
  labels:
    app: fl-client
    component: client
    version: v1.0.0
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 2
  selector:
    matchLabels:
      app: fl-client
  template:
    metadata:
      labels:
        app: fl-client
        component: client
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fl-client-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: fl-client
        image: fl-system/client:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8083
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: SERVER_ENDPOINT
          value: "http://fl-server:8081"
        - name: CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: AUTO_PARTICIPATE
          value: "true"
        - name: PRIVACY_ENABLED
          value: "false"
        - name: FAIRNESS_ENABLED
          value: "true"
        volumeMounts:
        - name: fl-config
          mountPath: /app/config
          readOnly: true
        - name: fl-data
          mountPath: /app/data
          readOnly: true
        - name: fl-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8083
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: fl-config
        configMap:
          name: fl-config
      - name: fl-data
        persistentVolumeClaim:
          claimName: fl-data-pvc
      - name: fl-logs
        emptyDir: {}
      restartPolicy: Always

---
# Service for Federated Learning Server
apiVersion: v1
kind: Service
metadata:
  name: fl-server
  namespace: federated-learning
  labels:
    app: fl-server
    component: server
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: federated
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: metrics
    port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    app: fl-server

---
# LoadBalancer Service for external access
apiVersion: v1
kind: Service
metadata:
  name: fl-server-external
  namespace: federated-learning
  labels:
    app: fl-server
    component: server
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  - name: federated
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: fl-server
  sessionAffinity: ClientIP

---
# Service for Redis
apiVersion: v1
kind: Service
metadata:
  name: fl-redis
  namespace: federated-learning
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fl-redis
  namespace: federated-learning
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes", "--maxmemory", "512mb"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Horizontal Pod Autoscaler for Server
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fl-server-hpa
  namespace: federated-learning
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fl-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Horizontal Pod Autoscaler for Clients
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fl-client-hpa
  namespace: federated-learning
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fl-client
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Longer for clients
      policies:
      - type: Pods
        value: 1
        periodSeconds: 180
    scaleUp:
      stabilizationWindowSeconds: 180
      policies:
      - type: Pods
        value: 3
        periodSeconds: 120

---
# ServiceAccount for FL Server
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fl-server-sa
  namespace: federated-learning

---
# ServiceAccount for FL Clients
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fl-client-sa
  namespace: federated-learning

---
# ClusterRole for monitoring access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fl-monitoring-reader
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fl-monitoring-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fl-monitoring-reader
subjects:
- kind: ServiceAccount
  name: fl-server-sa
  namespace: federated-learning

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fl-network-policy
  namespace: federated-learning
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: federated-learning
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from: []
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: federated-learning
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fl-ingress
  namespace: federated-learning
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - fedlearning.yourdomain.com
    secretName: fl-tls-secret
  rules:
  - host: fedlearning.yourdomain.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fl-server
            port:
              number: 8080
      - path: /federated
        pathType: Prefix
        backend:
          service:
            name: fl-server
            port:
              number: 8081

---
# ResourceQuota for namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: fl-resource-quota
  namespace: federated-learning
spec:
  hard:
    requests.cpu: "20"
    requests.memory: 40Gi
    limits.cpu: "40"
    limits.memory: 80Gi
    persistentvolumeclaims: "10"
    services: "10"
    secrets: "20"
    configmaps: "20"
    pods: "50"

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fl-server-pdb
  namespace: federated-learning
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: fl-server

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fl-client-pdb
  namespace: federated-learning
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fl-client